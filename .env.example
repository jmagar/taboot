# =============================================================================
# Taboot Environment Configuration (.env.example)
# Copy this file to .env and fill in your actual credentials.
# =============================================================================

# -------------------- FIRECRAWL --------------------
HOST="0.0.0.0"
FIRECRAWL_PORT="4200"          # Host port (maps to container 3002)
FIRECRAWL_INTERNAL_PORT="3002" # Internal container port
WORKER_PORT="4210"
FIRECRAWL_API_URL="http://taboot-crawler:3002"
# Generate a secure API key: openssl rand -hex 32
FIRECRAWL_API_KEY="<generate-secure-api-key>"
# Firecrawl language/locale control (Firecrawl v2 feature)
# Prevents auto-redirects to non-English locales
FIRECRAWL_DEFAULT_COUNTRY="US"           # ISO 3166-1 alpha-2 country code
FIRECRAWL_DEFAULT_LANGUAGES="en-US"      # Comma-separated locale codes (e.g., "en-US,en-GB")

# Firecrawl URL path filtering (Firecrawl v2 feature)
# Control which URL paths are crawled based on regex patterns
# NOTE: Patterns match pathname only (e.g., "/en/docs/api" not full URL)
# NOTE: excludePaths takes precedence over includePaths

# FIRECRAWL_INCLUDE_PATHS: Whitelist patterns (comma-separated regex)
# Empty = allow all paths (default)
# Example: "^/en/.*$,^/docs/.*$" (only crawl /en/* and /docs/* paths)
FIRECRAWL_INCLUDE_PATHS=""

# FIRECRAWL_EXCLUDE_PATHS: Blacklist patterns (comma-separated regex)
# Default blocks common non-English language paths: /de/, /fr/, /es/, etc.
# Empty = allow all paths (no blocking)
# Example: "^/de/.*$,^/fr/.*$" (block German and French paths)
FIRECRAWL_EXCLUDE_PATHS="^.*/(de|fr|es|it|pt|nl|pl|ru|ja|zh|ko|ar|tr|cs|da|sv|no)/.*$"

# Common use cases:
# 1. English-only (default above): Blocks 17 common languages
# 2. Specific path prefix: FIRECRAWL_INCLUDE_PATHS="^/en/.*$" (only /en/*)
# 3. Multiple languages: FIRECRAWL_EXCLUDE_PATHS="^.*/(de|fr)/.*$" (block DE/FR only)
# 4. No filtering: FIRECRAWL_EXCLUDE_PATHS="" (crawl everything)

NUM_WORKERS_PER_QUEUE="16"
WORKER_CONCURRENCY="8"
SCRAPE_CONCURRENCY="8"
RETRY_DELAY="1000"
MAX_RETRIES="1"
BULL_AUTH_KEY="@"
MAX_CPU="1.0"
MAX_RAM="1.0"

# -------------------- POSTGRES --------------------
POSTGRES_USER="taboot"
# Generate a secure password: openssl rand -base64 32
POSTGRES_PASSWORD="<generate-secure-password>"
POSTGRES_DB="taboot"
POSTGRES_HOST="taboot-db"
POSTGRES_PORT="4201"
NUQ_DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
# PostgreSQL Connection Pooling
POSTGRES_MIN_POOL_SIZE="5"
POSTGRES_MAX_POOL_SIZE="20"

# -------------------- SEARCH & EXTERNAL AI --------------------
OPENAI_API_KEY="sk-proj-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
MODEL_NAME="gpt-4-turbo"
SEARXNG_ENDPOINT="https://s.tootie.tv"
SEARXNG_ENGINES="google,bing,duckduckgo,startpage,yandex"
SEARXNG_CATEGORIES="general,images,videos,news,map,music,science"
HF_TOKEN="hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# -------------------- PLAYWRIGHT --------------------
PLAYWRIGHT_PORT="4213"
PLAYWRIGHT_MICROSERVICE_URL="http://taboot-playwright:3000/scrape"

# -------------------- REDIS --------------------
REDIS_PORT="4202"
# Local Redis for all services including rate limiting (taboot-cache service)
# CRITICAL: Used by Next.js web app for rate limiting via rate-limiter-flexible
# Default uses docker-compose service: redis://taboot-cache:6379
# Override for local development or external Redis instance
REDIS_URL="redis://taboot-cache:6379"
REDIS_RATE_LIMIT_URL="redis://taboot-cache:6379"
# Redis Connection Pooling
REDIS_MAX_CONNECTIONS="100"
REDIS_SOCKET_TIMEOUT="10"

# TRUST_PROXY: Set to 'true' ONLY if behind trusted reverse proxy
# Examples: Cloudflare, nginx, AWS ALB, Vercel
# SECURITY: Never set to 'true' if exposed directly to internet
# When true: Trusts X-Forwarded-For header for client IP (validates format)
# When false (default): Ignores X-Forwarded-For, uses connection IP
# Default: 'false' (doesn't trust X-Forwarded-For)
TRUST_PROXY="false"

# -------------------- QDRANT --------------------
QDRANT_HTTP_PORT="4203"  # Host port (maps to container 6333)
QDRANT_GRPC_PORT="4204"  # Host port (maps to container 6334)
QDRANT_URL="http://taboot-vectors:6333"
QDRANT_LOG_LEVEL="INFO"   # Optional: override Qdrant server log verbosity (INFO, DEBUG)
COLLECTION_NAME="documents"
# Qdrant Connection Pooling
QDRANT_MAX_CONNECTIONS="200"

# -------------------- NEO4J --------------------
NEO4J_USER="neo4j"
# Generate a secure password: openssl rand -base64 32
NEO4J_PASSWORD="<generate-secure-password>"
NEO4J_DB="neo4j"
NEO4J_HTTP_PORT="4205"
NEO4J_BOLT_PORT="4206"
NEO4J_URI="bolt://taboot-graph:7687"
# Neo4j Connection Pooling
NEO4J_MAX_POOL_SIZE="50"
NEO4J_CONNECTION_TIMEOUT="30"
# Neo4j Memory (aligned with docker-compose.yaml)
NEO4J_HEAP_INITIAL_SIZE="2G"
NEO4J_HEAP_MAX_SIZE="2G"
NEO4J_PAGECACHE_SIZE="2G"

# -------------------- TEI SERVICES --------------------
TEI_HTTP_PORT="4207"  # Host port (maps to container 80)
TEI_EMBEDDING_URL="http://taboot-embed:80"
TEI_EMBEDDING_MODEL="Qwen/Qwen3-Embedding-0.6B"
# TEI Performance Tuning (aligned with docker-compose.yaml)
TEI_MAX_CONCURRENT_REQUESTS="80"
TEI_MAX_BATCH_TOKENS="163840"
TEI_TOKENIZATION_WORKERS="8"

# -------------------- RERANKER (SentenceTransformers) --------------------
RERANKER_HTTP_PORT="4208"  # Host port (maps to container 8000)
RERANKER_URL="http://taboot-rerank:8000"
RERANKER_MODEL="Qwen/Qwen3-Reranker-0.6B"
RERANKER_BATCH_SIZE="16"
RERANKER_DEVICE="auto"

# -------------------- DATA SOURCE CREDENTIALS --------------------
# GitHub API Access
# Create a Personal Access Token at: https://github.com/settings/tokens
# Required scopes: repo, read:discussion
GITHUB_TOKEN="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# Reddit API Access
# Create an app at: https://www.reddit.com/prefs/apps
# Choose "script" app type
REDDIT_CLIENT_ID="xxxxxxxxxxxxxx"
REDDIT_CLIENT_SECRET="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
REDDIT_USER_AGENT="Script"
# Gmail API Access (OAuth 2.0)
# 1. Create a Google Cloud Project: https://console.cloud.google.com/
# 2. Enable Gmail API
# 3. Create OAuth 2.0 credentials (Desktop app type)
# 4. Download credentials.json
# 5. Run OAuth flow to obtain refresh token (see docs/configuration.md)
GOOGLE_CLIENT_ID="xxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="GOCSPX-xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_OAUTH_REFRESH_TOKEN="1//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
ELASTICSEARCH_URL="http://localhost:9200"
ELASTICSEARCH_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
UNIFI_API_TOKEN=""
UNIFI_USERNAME="api"
UNIFI_PASSWORD="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
TAILSCALE_API_KEY="tskey-api-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# -------------------- OLLAMA --------------------
OLLAMA_PORT="4214"
OLLAMA_FLASH_ATTENTION="true"
OLLAMA_KEEP_ALIVE="30m"
OLLAMA_USE_MMAP="true"
OLLAMA_MAX_QUEUE="20000"

# -------------------- LOGGING & OBSERVABILITY --------------------
LOG_LEVEL="INFO"
FASTTEXT_HOME=".cache/fasttext"

# Web Application Analytics & Observability
# Sentry Error Tracking
# Sign up at: https://sentry.io
# Create a new project and copy the DSN
NEXT_PUBLIC_SENTRY_DSN=""
# Optional: For source map uploads during build
SENTRY_ORG=""
SENTRY_PROJECT=""
SENTRY_AUTH_TOKEN=""
# Sentry Sampling Rates (0.0 to 1.0)
# Defaults: production (0.1) / development (1.0) for traces and session replays
NEXT_PUBLIC_SENTRY_TRACES_SAMPLE_RATE="0.1"           # Traces/performance monitoring
NEXT_PUBLIC_SENTRY_REPLAYS_ON_ERROR_RATE="1.0"        # Always capture replays on errors
NEXT_PUBLIC_SENTRY_REPLAYS_SESSION_RATE="0.1"         # Session replay sampling

# PostHog Product Analytics
# Sign up at: https://posthog.com or self-host
# Create a new project and copy the project API key
NEXT_PUBLIC_POSTHOG_KEY=""
NEXT_PUBLIC_POSTHOG_HOST="https://app.posthog.com"

# Vercel Analytics (automatic when deployed to Vercel, no config needed)
# For local development, no additional configuration required

# -------------------- API SERVICE --------------------
TABOOT_HTTP_PORT="4209"  # Host port (maps to container 8000)
TABOOT_API_URL="http://localhost:4209"
CORS_ALLOW_ORIGINS="http://localhost:4211,http://localhost:4213"  # Comma-separated list

# -------------------- BATCH PROCESSING --------------------
# Batch sizes for ingestion and extraction pipeline
EMBEDDING_BATCH_SIZE="64"
QDRANT_UPSERT_BATCH_SIZE="200"
INGEST_FLUSH_THRESHOLD="1000"

# =============================================================================
# WEB APPLICATION CONFIGURATION
# =============================================================================

# Next.js Web App API URL (for frontend to connect to FastAPI)
NEXT_PUBLIC_API_URL="http://localhost:4209"

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================

# Authentication Configuration
# CRITICAL: BETTER_AUTH_SECRET is used for both:
#   1. TypeScript better-auth (Next.js web app)
#   2. Python FastAPI JWT signing (API automatically falls back to this if AUTH_SECRET not set)
# - MUST be at least 32 characters (256 bits minimum)
# - MUST be cryptographically random (high entropy)
# - NEVER use weak values like "changeme", "test", or short strings
BETTER_AUTH_URL=http://localhost:3001
# Generate strong secret:
#   python -c 'import secrets; print(secrets.token_urlsafe(32))'
#   openssl rand -base64 32
BETTER_AUTH_SECRET="<generate-with-secrets-module-do-not-commit>"

# Optional: Set AUTH_SECRET if you want separate secrets for API vs web
# (Not needed for single-user systems - Python API will use BETTER_AUTH_SECRET)
# AUTH_SECRET="<optional-separate-secret-for-api>"
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# Email Configuration (Resend)
RESEND_API_KEY="your-resend-key"
EMAIL_FROM="noreply@taboot.dev"

# OAuth Providers (optional)
# GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET already defined above for Gmail

# Admin User Configuration (REQUIRED for admin endpoints)
# CRITICAL: Set this to the user ID of the admin account for admin-only endpoints
# SECURITY: If not set, admin endpoints will return 503 Service Not Configured (fail-closed)
# Find your user ID: SELECT id FROM auth.user WHERE email = 'your@email.com';
# Example: ADMIN_USER_ID="cm4abc123xyz"
ADMIN_USER_ID=""
