# Common configuration for all services
x-common-base: &common-base
  restart: unless-stopped
  networks:
    - taboot-net

# GPU device allocation
x-gpu-deploy: &gpu-deploy
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

# GPU environment variables
x-gpu-env: &gpu-env
  NVIDIA_VISIBLE_DEVICES: 0
  CUDA_VISIBLE_DEVICES: 0

# Common TEI environment variables
x-tei-env: &tei-env
  PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:1024
  OMP_NUM_THREADS: 8
  TOKENIZERS_PARALLELISM: "true"
  CUDA_CACHE_DISABLE: 0
  RUST_LOG: text_embeddings_router=info
  HF_HUB_CACHE: /data/cache

services:
  taboot-vectors:
    <<: [*common-base, *gpu-deploy]
    container_name: taboot-vectors
    image: qdrant/qdrant:gpu-nvidia-latest
    ports:
      - "${QDRANT_HTTP_PORT:-7000}:6333"
      - "${QDRANT_GRPC_PORT:-7001}:6334"
    volumes:
      - taboot-vectors:/qdrant/storage
    environment:
      <<: *gpu-env
      QDRANT__LOG_LEVEL: "${QDRANT_LOG_LEVEL:-INFO}"
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__GPU__INDEXING: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -e 'GET /readyz HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' | bash -c 'exec 3<>/dev/tcp/localhost/6333; cat >&3; head -1 <&3' | grep -q '200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  taboot-embed:
    <<: [*common-base, *gpu-deploy]
    image: ghcr.io/huggingface/text-embeddings-inference:latest
    container_name: taboot-embed
    depends_on:
      taboot-vectors:
        condition: service_healthy
    ports:
      - "${TEI_HTTP_PORT:-8080}:80"
    volumes:
      - taboot-embed:/data
    command:
      - --model-id
      - ${TEI_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - --dtype
      - float16
      - --max-concurrent-requests
      - "80"
      - --max-batch-tokens
      - "163840"
      - --max-batch-requests
      - "80"
      - --max-client-batch-size
      - "128"
      - --pooling
      - "last-token"
      - --tokenization-workers
      - "8"
      - --auto-truncate
    environment:
      <<: [*gpu-env, *tei-env]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  taboot-rerank:
    <<: [*common-base, *gpu-deploy]
    build:
      context: ./docker/reranker
      dockerfile: Dockerfile
    image: taboot/rerank:latest
    container_name: taboot-rerank
    ports:
      - "${RERANKER_HTTP_PORT:-8081}:8000"
    environment:
      <<: *gpu-env
      MODEL_ID: ${RERANKER_MODEL:-Qwen/Qwen3-Reranker-0.6B}
      BATCH_SIZE: ${RERANKER_BATCH_SIZE:-16}
      RERANKER_DEVICE: ${RERANKER_DEVICE:-auto}
      HF_TOKEN: ${HF_TOKEN:-}
    volumes:
      - taboot-rerank:/root/.cache/huggingface
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  taboot-graph:
    <<: *common-base
    build:
      context: ./docker/neo4j
      dockerfile: Dockerfile
    image: taboot/neo4j:5.23-community
    container_name: taboot-graph
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - taboot-graph_data:/data
      - taboot-graph_logs:/logs
      - taboot-graph_plugins:/plugins
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_server_memory_heap_initial__size: 2G
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 2G
      NEO4J_initial_dbms_default__database: neo4j
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u \"${NEO4J_USER}\" -p \"${NEO4J_PASSWORD}\" 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  taboot-cache:
    <<: *common-base
    image: redis:7.2-alpine
    container_name: taboot-cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - taboot-cache:/data
    command: redis-server --appendonly yes --appendfsync everysec --save 900 1 --save 300 10 --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  taboot-ollama:
    <<: [*common-base, *gpu-deploy]
    image: ollama/ollama:latest
    container_name: taboot-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - taboot-ollama:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_FLASH_ATTENTION: "true"
      OLLAMA_KEEP_ALIVE: "30m"
      OLLAMA_USE_MMAP: "true"
      OLLAMA_MAX_QUEUE: "20000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  taboot-playwright:
    <<: *common-base
    image: ghcr.io/firecrawl/playwright-service:latest
    container_name: taboot-playwright
    environment:
      PORT: 3000
    ports:
      - "${PLAYWRIGHT_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  taboot-crawler:
    <<: *common-base
    image: ghcr.io/firecrawl/firecrawl
    container_name: taboot-crawler
    env_file:
      - .env
    ports:
      - "${FIRECRAWL_PORT:-3002}:${FIRECRAWL_INTERNAL_PORT:-3002}"
    command: node dist/src/harness.js --start-docker
    depends_on:
      taboot-db:
        condition: service_healthy
      taboot-cache:
        condition: service_started
      taboot-playwright:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    extra_hosts:
      - "host.docker.internal:host-gateway"

  taboot-db:
    <<: *common-base
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
      args:
        POSTGRES_DB: ${POSTGRES_DB:-taboot}
    image: taboot/postgres:16
    container_name: taboot-db
    env_file:
      - .env
    volumes:
      - taboot-db:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-taboot}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  taboot-app:
    <<: *common-base
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: taboot-app
    env_file:
      - .env
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - taboot-app:/app/.venv
      - ${HOME}/.ssh:/home/llamacrawl/.ssh:ro
    ports:
      - "${TABOOT_HTTP_PORT:-8000}:8000"
      - "${TABOOT_WEB_PORT:-3000}:3000"
    depends_on:
      taboot-cache:
        condition: service_healthy
      taboot-vectors:
        condition: service_healthy
      taboot-graph:
        condition: service_healthy
      taboot-embed:
        condition: service_healthy
      taboot-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health && curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  taboot-worker:
    <<: *common-base
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: taboot-worker
    env_file:
      - .env
    depends_on:
      taboot-cache:
        condition: service_healthy
      taboot-vectors:
        condition: service_healthy
      taboot-graph:
        condition: service_healthy
      taboot-embed:
        condition: service_healthy
      taboot-rerank:
        condition: service_healthy
      taboot-db:
        condition: service_healthy
    command: ["python", "-m", "apps.worker.main"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'apps.worker.main' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  taboot-embed:
  taboot-rerank:
  taboot-vectors:
  taboot-graph_data:
  taboot-graph_logs:
  taboot-graph_plugins:
  taboot-cache:
  taboot-ollama:
  taboot-db:
  taboot-app:

networks:
  taboot-net:
    driver: bridge
