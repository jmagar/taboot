from typing import Any, Callable, TypeVar


F = TypeVar("F", bound=Callable[..., Any])


class HTTPException(Exception):
    status_code: int
    detail: Any

    def __init__(self, status_code: int, detail: Any = ..., headers: dict[str, Any] | None = ...) -> None: ...


class BackgroundTasks:
    def add_task(self, func: Callable[..., Any], *args: Any, **kwargs: Any) -> None: ...


def Depends(dependency: Callable[..., Any] | None = ...) -> Any: ...


def Header(default: Any = ..., *, alias: str | None = ..., convert_underscores: bool = ..., required: bool | None = ...) -> Any: ...


def Query(default: Any = ..., *, alias: str | None = ..., ge: Any = ..., le: Any = ..., gt: Any = ..., lt: Any = ..., description: str | None = ..., example: Any = ...) -> Any: ...


class _StatusModule:
    def __getattr__(self, name: str) -> int: ...


status = _StatusModule()


class Response:
    status_code: int

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Request:
    app: Any
    state: Any


class APIRouter:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def post(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def put(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def delete(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def include_router(self, router: "APIRouter", *args: Any, **kwargs: Any) -> None: ...


class FastAPI:
    state: Any

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

    def get(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def post(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def put(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def delete(self, path: str, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...
    def include_router(self, router: APIRouter, *args: Any, **kwargs: Any) -> None: ...
    def add_middleware(self, middleware: Any, *args: Any, **kwargs: Any) -> None: ...
    def add_exception_handler(self, exc_class: type[BaseException], handler: Callable[..., Any]) -> None: ...
    def openapi(self) -> dict[str, Any]: ...
