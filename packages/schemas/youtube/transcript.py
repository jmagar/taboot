"""Transcript entity schema.

Represents YouTube video transcripts.
"""

from datetime import datetime
from typing import Literal

from pydantic import BaseModel, Field, field_validator


class Transcript(BaseModel):
    """Transcript entity representing a YouTube video transcript.

    Extracted from:
    - YouTube API (captions/subtitles)
    - LlamaIndex YouTube transcript loader
    """

    # Identity fields
    transcript_id: str = Field(
        ...,
        min_length=1,
        description="Unique transcript identifier (usually video_id + language)",
        examples=["dQw4w9WgXcQ_en", "jNQXAC9IVRw_es"],
    )
    video_id: str = Field(
        ...,
        min_length=1,
        description="YouTube video ID this transcript belongs to",
        examples=["dQw4w9WgXcQ", "jNQXAC9IVRw"],
    )

    # Transcript metadata
    language: str = Field(
        ...,
        min_length=1,
        description="Transcript language code (ISO 639-1)",
        examples=["en", "es", "fr", "de", "ja"],
    )
    auto_generated: bool = Field(
        False,
        description="Whether the transcript was auto-generated by YouTube",
    )
    content: str = Field(
        ...,
        min_length=1,
        description="Full transcript text content",
    )

    # Temporal tracking (required on ALL entities)
    created_at: datetime = Field(
        ...,
        description="When we created this node in our system",
    )
    updated_at: datetime = Field(
        ...,
        description="When we last modified this node",
    )
    source_timestamp: datetime | None = Field(
        None,
        description="When the source content was created",
    )

    # Extraction metadata (required on ALL entities)
    extraction_tier: Literal["A", "B", "C"] = Field(
        ...,
        description="Extraction tier: A (deterministic), B (spaCy), C (LLM)",
    )
    extraction_method: str = Field(
        ...,
        description="Method used for extraction",
        examples=["youtube_transcript_api", "llamaindex_youtube_transcript"],
    )
    confidence: float = Field(
        ...,
        ge=0.0,
        le=1.0,
        description="Extraction confidence (0.0-1.0, usually 1.0 for Tier A)",
    )
    extractor_version: str = Field(
        ...,
        description="Version of the extractor that created this entity",
        examples=["1.0.0", "1.2.0"],
    )

    @field_validator("extraction_tier")
    @classmethod
    def validate_extraction_tier(cls, v: str) -> str:
        """Validate extraction_tier is A, B, or C."""
        if v not in ("A", "B", "C"):
            raise ValueError("extraction_tier must be A, B, or C")
        return v

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "transcript_id": "dQw4w9WgXcQ_en",
                    "video_id": "dQw4w9WgXcQ",
                    "language": "en",
                    "auto_generated": False,
                    "content": "Never gonna give you up, never gonna let you down...",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z",
                    "extraction_tier": "A",
                    "extraction_method": "youtube_transcript_api",
                    "confidence": 1.0,
                    "extractor_version": "1.0.0",
                }
            ]
        }
    }
