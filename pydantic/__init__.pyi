from typing import Any, Callable, ClassVar, TypeVar

Self = TypeVar("Self", bound="BaseModel")


class ValidationInfo:
    data: dict[str, Any]


def Field(*args: Any, **kwargs: Any) -> Any: ...


class SecretStr:
    def __init__(self, value: str) -> None: ...
    def get_secret_value(self) -> str: ...


class HttpUrl(str): ...


def field_validator(*fields: str, **kwargs: Any) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...


class BaseModel:
    model_config: ClassVar[Any]

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def model_copy(self: Self, *, update: dict[str, Any] | None = ..., deep: bool = ...) -> Self: ...
    def model_dump(self, *args: Any, **kwargs: Any) -> dict[str, Any]: ...
    def model_dump_json(self, *args: Any, **kwargs: Any) -> str: ...
    def model_post_init(self, __context: Any) -> None: ...

    @classmethod
    def model_validate_json(cls, data: str) -> Any: ...
